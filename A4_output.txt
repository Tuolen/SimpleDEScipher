----------------------------------------
Start of PRNG Testing

Testing Blum Blum Shub: 
PRNG.BBS(383,503,8) = 01110011
PRNG.BBS(11,19,4) = 1110
PRNG.BBS(27691,11,16) = 1111110111000011
PRNG.BBS(383,503,0) = Error(PRNG.BBS): invalid bits
PRNG.BBS(383,503.0,1) = Error(PRNG.BBS): invalid q
PRNG.BBS(384,503,1) = Error(PRNG.BBS): invalid p

End of PRNG Testing
----------------------------------------

----------------------------------------
Start of SBOX class testing

Creating an empty SBOX:
SBOX(0):
[]
[]
sbox.substitute(1000) = 
sbox.is_empty() = True
sbox.get_size() = 0
sbox.get_box() = [[], []]

Loading sbox1.txt:
sbox.set_box('sbox1.txt'): None
SBOX(4):
['101', '010', '001', '110', '011', '100', '111', '000']
['001', '100', '110', '010', '000', '111', '101', '011']
sbox.is_empty() = False
sbox.get_size() = 4
sbox.get_box() = [['101', '010', '001', '110', '011', '100', '111', '000'], ['001', '100', '110', '010', '000', '111', '101', '011']]
sbox.substitute(1101) = 111
sbox.substitute(0010) = 001
sbox.substitute(0111) = 000
sbox.substitute(0000) = 101
sbox.substitute(010) = 
sbox.substitute(1010) = 

sbox.set_box('sbox2.txt'): None
SBOX(4):
['100', '000', '110', '101', '111', '001', '011', '010']
['101', '011', '000', '111', '110', '010', '001', '100']
sbox.substitute(1101) = 010
sbox.substitute(0010) = 110
sbox.substitute(0111) = 010
sbox.substitute(0000) = 100
sbox.substitute(010) = 
sbox.substitute(1010) = 

End of SBOX class Testing
----------------------------------------

----------------------------------------
Start of SDES basics testing

Testing default values (get_value):
sdes.get_value(rounds) = 2
sdes.get_value(key_length) = 9
sdes.get_value(block_size) = 12
sdes.get_value(encoding) = B6
sdes.get_value(sbox1) = SBOX(4):
['101', '010', '001', '110', '011', '100', '111', '000']
['001', '100', '110', '010', '000', '111', '101', '011']
sdes.get_value(sbox2) = SBOX(4):
['100', '000', '110', '101', '111', '001', '011', '010']
['101', '011', '000', '111', '110', '010', '001', '100']
sdes.get_value(p) = 103
sdes.get_value(q) = 199
sdes.get_value(pad) = Q
sdes.get_value(size) = Error(SDES.get_value): undefined parameter

Testing set_parameter:
sdes.set_parameter(rounds,5) = True
sdes.set_parameter(rounds,1) = False
sdes.set_parameter(rounds,4.3) = False
sdes.set_parameter(p,683) = True
sdes.set_parameter(p,899) = False
sdes.set_parameter(q,684) = False
sdes.set_parameter(q,13.2) = False
sdes.set_parameter(pad,r) = True
sdes.set_parameter(pad,ab) = False
sdes.set_parameter(pad,1) = False
sdes.set_parameter(pad,?) = False
sdes.set_parameter(encoding,B6) = True
sdes.set_parameter(encoding,ascii) = False
sdes.set_parameter(block_size,1024) = False
sdes.set_parameter(block_size,243) = False
sdes.set_parameter(block_size,512.0) = False
Error(SDES.set_parameter): undefined operation
sdes.set_parameter(key_length,64) = False
Error(SDES.set_parameter): undefined operation
sdes.set_parameter(sbox_size,128) = False

End of SDES basics Testing
----------------------------------------

----------------------------------------
Start of SDES keys testing

Testing get_key:
p = 103, q = 199
sdes.get_key() = 100011001
p = 683, q = 199
sdes.get_key() = 010111101
p = 683, q = 503
sdes.get_key() = 101111010

Testing get_subkey:
key = 101111010
subkey(0) = 
subkey(1) = 10111101
subkey(2) = 01111010
subkey(3) = 11110101
subkey(4) = 11101010
subkey(5) = 11010101
subkey(6) = 10101011
subkey(7) = 01010111
subkey(8) = 10101111
subkey(9) = 01011110
subkey(10) = 10111101
subkey(11) = 01111010

End of SDES keys Testing
----------------------------------------

----------------------------------------
Start of Feistel Network testing

Testing expand:
sdes.expand(011001) = 01010101
sdes.expand(00001111) = 0001010111
sdes.expand(0011) = 010101
sdes.expand() = 
sdes.expand(1011) = 

Testing F function:
F(111000,00011010) = 000001
F(100110,01100101) = 000100
F(10011,01100101) = 
F(100110,0110010) = 

Testing feistel:
feistel(011100100110,01100101) = 100110011000
feistel(010001100101,11000001) = 100101101100
feistel(01110010011,01100101) = 
feistel(011100100110,0110010) = 

End of Feistel Network Testing
----------------------------------------

----------------------------------------
Start of SDES ECB Mode testing

key = 111001101
plaintext  = OK
ciphertext = kX
plaintext2 = OK

key = 000100011
plaintext  = Sit
ciphertext = gGRR
plaintext2 = Sit

key = 111111011
plaintext  = beet
ciphertext = dv3e
plaintext2 = beet

key = 101111010
plaintext  = welcome
ciphertext = K3RFOg E
plaintext2 = welcome

key = 111100100
plaintext  = "Cryptography" is power
ciphertext = "3j8z9elJ6K52"5gbl8wwKzP
plaintext2 = "Cryptography" is power

key = 110010001
plaintext  = go-go
ciphertext = GD-GD
plaintext2 = go-go

End of SDES ECB Mode Testing
----------------------------------------

----------------------------------------
Start of SDES CBC Mode testing

key = 111001101
plaintext  = go
ciphertext = yE
plaintext2 = go

key = 110011101
plaintext  = CAT
ciphertext = XCpt
plaintext2 = CAT

key = 111111011
plaintext  = seed
ciphertext = go1g
plaintext2 = seed

key = 101111010
plaintext  = go-go
ciphertext = pT-s4
plaintext2 = go-go

key = 100101110
plaintext  = cryptanalysis tricks
ciphertext = 0CPt5fpLd8UvXuVZAeJk
plaintext2 = cryptanalysis tricks

End of SDES CBC Mode Testing
----------------------------------------

